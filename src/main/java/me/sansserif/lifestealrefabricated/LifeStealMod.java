package me.sansserif.lifestealrefabricated;

import net.fabricmc.api.DedicatedServerModInitializer;
import net.fabricmc.fabric.api.entity.event.v1.ServerEntityCombatEvents;
import net.fabricmc.fabric.api.entity.event.v1.ServerPlayerEvents;
import net.fabricmc.fabric.api.event.lifecycle.v1.ServerLifecycleEvents;
import net.fabricmc.fabric.api.networking.v1.ServerPlayConnectionEvents;
import net.fabricmc.loader.api.FabricLoader;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.network.ServerPlayerEntity;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class LifeStealMod implements DedicatedServerModInitializer {
	// This logger is used to write text to the console and the log file.
	// It is considered best practice to use your mod id as the logger's name.
	// That way, it's clear which mod wrote info, warnings, and errors.
	public static final Logger LOGGER = LogManager.getLogger("lifestealrefabricated");
	private static final File config = FabricLoader.getInstance().getConfigDir().resolve("lifesteal.properties").toFile();
	List<LifeSave> hps = new ArrayList<>();

	@Override
	public void onInitializeServer() {
		boolean canrun = loadLS();
		// This code runs as soon as Minecraft is in a mod-load-ready state.
		// However, some things (like resources) may still be uninitialized.
		// Proceed with mild caution.

		if (canrun) {



			//CODE
			ServerPlayConnectionEvents.JOIN.register(((handler, sender, server) -> {
				int hp = -1;
				for (int i = 0; i != hps.size(); i++) {
					if (hps.get(i).getPlayerName().equals(handler.getPlayer().getName().asString()))
						hp = hps.get(i).getMaxHp();
				}
				if (hp == -1) {
					try {
						hps.add(new LifeSave(handler.getPlayer().getName().asString() + "=20"));
					} catch (Exception ignored) {}
				}
			}));
			ServerLifecycleEvents.SERVER_STOPPING.register((server -> {
				//save to config
				StringBuilder conf = new StringBuilder("# DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT ARE YOU DOING || NEVER EDIT THIS WHILE THE SERVER IS RUNNING\n");
				for (int i = 0; i != hps.size(); i++) {
					LifeSave ls = hps.get(i);
					conf
							.append(ls.getPlayerName())
							.append("=")
							.append(ls.getMaxHp()).append("\n");
				}
				try {
					FileWriter fw = new FileWriter(config);
					fw.write(conf.toString());
					fw.close();
				} catch (IOException e) {
					LOGGER.error("COULD NOT SAVE LIFESTEAL CONFIG!");
					e.printStackTrace();
				}

			}));
			ServerEntityCombatEvents.AFTER_KILLED_OTHER_ENTITY.register(((world, one, two) -> {
				if (one.isPlayer() && two.isPlayer())
					if (!one.getName().asString().equals(two.getName().asString())) {
					ServerPlayerEntity killer = (ServerPlayerEntity) one;
					ServerPlayerEntity killed = (ServerPlayerEntity) two;

					boolean canbekilled = true;
					for (int i = 0; i != hps.size(); i++) {
						LifeSave ls = hps.get(i);
						if (ls.getPlayerName().equals(killed.getName().asString())) {
							if (hps.get(i).getMaxHp() <= 2)
								canbekilled = false;
							if (canbekilled)
							ls.removeHp();
						}

					}
					for (int i = 0; i != hps.size(); i++) {
						LifeSave ls = hps.get(i);
						if (ls.getPlayerName().equals(killer.getName().asString())) {
							if (canbekilled) {
								ls.addHp();
								sendcmd("attribute " + killer.getName().asString() + " minecraft:generic.max_health base set " + ls.getMaxHp(), world.getServer());
							}
						}
					}
				}
			}));
			ServerPlayerEvents.AFTER_RESPAWN.register(((oldPlayer, newPlayer, alive) -> {
				for (int i = 0; i != hps.size(); i++) {
					if (hps.get(i).getPlayerName().equals(newPlayer.getName().asString())) {
						sendcmd("attribute " + newPlayer.getName().asString() + " minecraft:generic.max_health base set " + hps.get(i).getMaxHp(), newPlayer.getServer());
						newPlayer.setHealth(hps.get(i).getMaxHp());
					}
				}
			}));




		} else {
			LOGGER.warn("THE LIFESTEAL MOD CONFIG FILE IS BROKEN! REMOVE IT AND RESTART THE SERVER.");
		}
	}
	private static class LifeSave {
		private final String playername;
		private int hp;
		public LifeSave(String line) throws Exception {
			if (!line.contains("="))
				throw new Exception();
			playername = line.substring(0, line.indexOf("="));
			hp = Integer.parseInt(line.substring(line.indexOf("=") + 1));
		}
		public String getPlayerName() {
			return playername;
		}
		public int getMaxHp() {
			return hp;
		}
		public void addHp() {hp = hp + 2;}
		public void removeHp() {hp = hp - 2;}
	}
	public boolean loadLS() {
		boolean canrun = true;
		try {
			if (!config.exists()) {
				config.createNewFile();
				FileWriter comment = new FileWriter(config);
				comment.write("# DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT ARE YOU DOING || NEVER EDIT THIS WHILE THE SERVER IS RUNNING");
				comment.close();
			}
			Scanner scanner = new Scanner(config);
			while (scanner.hasNextLine()) {
				String ln = scanner.nextLine();
				if (ln != "" && !ln.startsWith("#")) {
					hps.add(new LifeSave(ln));
				}
			}

		} catch (Exception e) {
			canrun = false;
		}
		return canrun;
	}
	public void sendcmd(String cmd, MinecraftServer server) {
		server.getCommandManager().execute(server.getCommandSource(), cmd);
	}

	}